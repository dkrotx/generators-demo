import (
  "io"
  "fmt"
)

{{ $decorator := (printf "%sWithLog" .Interface.Name) }}

// {{$decorator}} implements {{.Interface.Type}} that is instrumented with logging
type {{$decorator}} struct {
  base {{.Interface.Type}}
  wr io.Writer
}

// New{{$decorator}} instruments an implementation of the {{.Interface.Type}} with simple logging
func New{{$decorator}}(base {{.Interface.Type}}, wr io.Writer) {{$decorator}} {
  return {{$decorator}}{
    base: base,
    wr: wr, 
  }
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (d {{$decorator}}) {{$method.Declaration}} {
      {{- if $method.HasParams}}
        d.printDebug("{{$decorator}}: calling {{$method.Name}} with params:", {{$method.ParamsNames}})
      {{else}}
        d.printDebug("{{$decorator}}: calling {{$method.Name}}")
      {{end -}}

      defer func() {
          {{- if $method.HasResults}}
            d.printDebug("{{$decorator}}: {{$method.Name}} returned results:", {{$method.ResultsNames}})
          {{else}}
            d.printDebug("{{$decorator}}: {{$method.Name}} finished")
          {{end -}}
        }()

      {{ $method.Pass "d.base." }}
  }
{{end}}

func (d {{$decorator}}) printDebug(first string, a...any) {
    fmt.Fprintln(d.wr, "==== " + first, a)
}
